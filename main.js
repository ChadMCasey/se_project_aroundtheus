!function(){"use strict";class e{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this._id=e.id,this._isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleCardLike=i,this._openDeleteModal=r,this._cardElement=null,this._cardImageElement=null,this._cardHeartElement=null,this._cardTrashElement=null,this._cardTextElement=null}generateCard(){return this._cardElement=this._generateCardTemplate(),this._cardImageElement=this._cardElement.querySelector(".card__img"),this._cardHeartElement=this._cardElement.querySelector(".card__heart"),this._cardTrashElement=this._cardElement.querySelector(".card__trash"),this._cardTextElement=this._cardElement.querySelector(".card__title"),this._cardTextElement.textContent=this._name,this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._setEventListeners(),this.setIsLiked(this._isLiked),this._cardElement}_generateCardTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}_setEventListeners(){this._cardImageElement.addEventListener("click",(e=>{this._handleImageClick(this)})),this._cardTrashElement.addEventListener("click",(e=>{this._handleDelete(e)})),this._cardHeartElement.addEventListener("click",(e=>{this._handleLike(e)}))}_handleDelete(e){this._openDeleteModal(this)}_handleLike(e){this._handleCardLike(this)}getCardImageElement(){return this._cardImageElement}getCardText(){return this._cardTextElement}getID(){return this._id}getCardElement(){return this._cardElement}getIsLiked(){return this._isLiked}setIsLiked(e){this._isLiked=e,e?this._cardHeartElement.classList.add("card__heart_dark"):this._cardHeartElement.classList.remove("card__heart_dark")}}class t{constructor(e,t){this._config=e,this._form=t,this._formInputs=null,this._formButton=null}enableValidation(){this._formInputs=Array.from(this._form.querySelectorAll(this._config.inputSelector)),this._formButton=this._form.querySelector(this._config.submitButtonSelector),this._setEventListener()}_setEventListener(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this.resetValidation()})),this._formInputs.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))})),this.resetValidation()}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){const t=this._form.querySelector(`.${e.id}-error`);e.classList.add(this._config.inputErrorClass),t.classList.add(this._config.errorTextClass),t.textContent=e.validationMessage}_hideInputError(e){const t=this._form.querySelector(`.${e.id}-error`);e.classList.remove(this._config.inputErrorClass),t.classList.remove(this._config.errorTextClass),t.textContent=""}_hasValidInput(){return this._formInputs.every((e=>e.validity.valid))}_toggleButtonState(){this._hasValidInput()?this._formButton.disabled=!1:this._formButton.disabled=!0}resetValidation(){this._formInputs.forEach((e=>{this._hideInputError(e)})),this._formButton.disabled=!0}}class s{constructor(e){this._popupSelector=e,this._popupSelectorNoPeriod=e.replace(".",""),this._popup=document.querySelector(e),this._popupClose=this._popup.querySelector(".modal__close")}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupClose.addEventListener("click",(()=>{this.close()})),this._popup.addEventListener("click",(e=>{e.target.classList.contains(this._popupSelectorNoPeriod)&&this.close()}))}}class r extends s{constructor(e){let{popupSelector:t,handleSubmitFunc:s}=e;super(t),this._handleSubmit=s,this._popUpForm=this._popup.querySelector(".form"),this._inputList=this._popup.querySelectorAll(".form__input"),this._popupSubmit=this._popup.querySelector(".modal__submit"),this._popupSubmitText=this._popupSubmit.textContent}_getInputValues(){const e={};return this._inputList.forEach((t=>e[t.name]=t.value)),e}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){this._popup.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._getInputValues())})),super.setEventListeners()}renderLoading(e){let{isLoading:t,loadingText:s="Saving..."}=e;this._popupSubmit.textContent=t?s:this._popupSubmitText}getForm(){return this._popUpForm}}const i={formSelector:".modal__form",formFieldset:".form__fieldset",inputSelector:".form__input",submitButtonSelector:".form__submit",inputErrorClass:"form__input_type_error",errorTextClass:"form__input-error_active"},n=document.forms["profile-form"],o=document.querySelector(".profile").querySelector(".profile__edit-button"),a=document.querySelector(".profile__add-button"),l=document.querySelector(".profile__image-edit"),d=Array.from(document.forms),h={};let c=null;const u=new class{constructor(e){this._options=e,this._baseURL=e.baseUrl,this._headers=e.headers,this._authtoken=e.headers.authorization,this._contentTypeJSON=e.headers["Content-Type"]}getUserInformation(){return this._request(`${this._baseURL}/users/me`,{method:"GET",headers:this._headers})}getAppInfo(){return Promise.all([this.getInitalCards(),this.getUserInformation()])}patchProfileInformation(e){let{name:t,about:s}=e;return this._request(`${this._baseURL}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})})}addCard(e){let{name:t,link:s}=e;return this._request(`${this._baseURL}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})})}deleteCard(e){return this._request(`${this._baseURL}/cards/${e}`,{method:"DELETE",headers:this._headers})}likeCard(e){let{cardId:t,likeBool:s}=e;return this._request(`${this._baseURL}/cards/${t}/likes`,{method:s?"DELETE":"PUT",headers:this._headers})}updateProfilePicture(e){return this._request(`${this._baseURL}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}getInitalCards(){return this._request(`${this._baseURL}/cards`,{method:"GET",headers:this._headers})}_checkResponse(e){return e.ok?e.json():Promise.reject(e)}_request(e,t){return fetch(e,t).then(this._checkResponse)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"3352b458-30c6-41be-9a42-00c52b81b385","Content-Type":"application/json"}}),_=new class{constructor(e){let{nameSelector:t,jobSelector:s,photoSelector:r}=e;this._nameElem=document.querySelector(t),this._jobElem=document.querySelector(s),this._imageElem=document.querySelector(r)}getUserInfo(){return{name:this._nameElem.textContent,job:this._jobElem.textContent}}setUserInfo(e){let{name:t,job:s}=e;this._nameElem.textContent=t,this._jobElem.textContent=s}setUserPhoto(e){let{avatar:t}=e;this._imageElem.src=t}}({nameSelector:".profile__name",jobSelector:".profile__avocation",photoSelector:".profile__avatar"}),m=new r({popupSelector:".profile-modal",handleSubmitFunc:e=>{m.renderLoading({isLoading:!0}),u.patchProfileInformation({name:e.name,about:e.job}).then((t=>{m.close(),_.setUserInfo({name:e.name,job:e.job}),m.getForm().reset()})).catch((e=>{console.error(`Patch Profile Error: ${e.status}`)})).finally((()=>{m.renderLoading({isLoading:!1})}))}}),p=new r({popupSelector:".add-modal",handleSubmitFunc:e=>{p.renderLoading({isLoading:!0}),u.addCard({name:e.name,link:e.link}).then((e=>{const t=k({name:e.name,link:e.link,id:e._id,isLiked:e.isLiked});f.addItem(t),p.close(),p.getForm().reset()})).catch((e=>{console.error(`Create Card Error: ${e.status}`)})).finally((()=>{p.renderLoading({isLoading:!1})}))}}),E=new r({popupSelector:".profile-image-modal",handleSubmitFunc:e=>{E.renderLoading({isLoading:!0}),u.updateProfilePicture(e.avatar).then((t=>{_.setUserPhoto(e),E.close(),E.getForm().reset()})).catch((e=>{console.error(`Edit Profile Image Error: ${e.status}`)})).finally((()=>{E.renderLoading({isLoading:!1})}))}}),L=new class extends s{constructor(e){let{popupSelector:t}=e;super(t),this._popupImage=this._popup.querySelector(".image-modal__img"),this._popupTitle=this._popup.querySelector(".image-modal__title")}open(e){let{cardName:t,cardLink:s}=e;this._popupImage.src="",this._popupImage.src=s,this._popupImage.alt=t,this._popupTitle.textContent=t,super.open()}}({popupSelector:".image-modal"}),g=new class extends s{constructor(e){let{popupSelector:t,handleSubmitFunc:s}=e;super(t),this._handleSubmit=s,this._submitDelete=this._popup.querySelector(".modal__submit"),this._submitDeleteText=this._submitDelete.textContent}setEventListeners(){this._submitDelete.addEventListener("click",(()=>{this._handleSubmit()})),super.setEventListeners()}renderLoading(e){let{isLoading:t,loadingText:s="Deleting..."}=e;this._submitDelete.textContent=t?s:this._submitDeleteText}}({popupSelector:".delete-modal",handleSubmitFunc:()=>{g.renderLoading({isLoading:!0}),u.deleteCard(c.getID()).then((e=>{c.getCardElement().remove(),c=null,g.close()})).catch((e=>{console.error(`Delete Card Error: ${e.status}`)})).finally((()=>{g.renderLoading({isLoading:!1})}))}}),f=new class{constructor(e){this._container=document.querySelector(e)}addItem(e){this._container.prepend(e)}}(".cards__list");function S(e){c=e,g.open()}function b(e){const t=e.getCardImageElement(),s=e.getCardText();L.open({cardName:s.textContent,cardLink:t.src})}function k(t){return new e({name:t.name,link:t.link,id:t.id,isLiked:t.isLiked},".card-template",b,S,I).generateCard()}function I(e){u.likeCard({cardId:e.getID(),likeBool:e.getIsLiked()}).then((t=>{e.setIsLiked(t.isLiked)}))}d.forEach((e=>{const s=new t(i,e);h[e.id]=s,s.enableValidation()})),u.getAppInfo().then((e=>{let[t,s]=e;t.sort(((e,t)=>new Date(e.createdAt)-new Date(t.createdAt))).forEach((e=>{const t=k({name:e.name,link:e.link,id:e._id,isLiked:e.isLiked});f.addItem(t)})),_.setUserInfo({name:s.name,job:s.about}),_.setUserPhoto({avatar:s.avatar})})).catch((e=>{console.error(`Load Intial Data Error: ${e.status}`)})),o.addEventListener("click",(function(){m.open(),h[n.id].resetValidation();const{name:e,job:t}=_.getUserInfo();m.setInputValues({name:e,job:t})})),a.addEventListener("click",(()=>{p.open()})),l.addEventListener("click",(()=>{E.open()})),p.setEventListeners(),L.setEventListeners(),g.setEventListeners(),m.setEventListeners(),E.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,